//@ts-ignore
import { PluginModel, DocumentMoniker, SearchFeature, Model, LoadResult, Store, EventFan, ZoomSettings } from '@grapecity/viewer-core';
//@ts-ignore
import { ContextMenuProvider } from "@grapecity/core-ui";
import * as Articles from './Articles';
import * as Annotations from './Annotations';
import { ParameterInfo } from './GcPdfDocument';
import { GcPdfSearcher } from './Search/GcPdfSearcher';
import * as Search from './Search/SearchPanel';
import { GcPdfPrintProgress } from './Print/GcPdfPrintProgress';
import { GcPdfPasswordDialog } from './Password/GcPdfPasswordDialog';
import { PropertiesDialog } from './Properties/PropertiesDialog';
import { ConfirmationDialog } from './Dialogs/ConfirmationDialog';
import { SignToolSettings, ViewerOptions } from './ViewerOptions';
import { GcPdfViewer } from './GcPdfViewer';
import { ArticleBead } from './Articles/types';
import { GcPdfViewerStateStorage } from './GcPdfViewerStateStorage';
import { ShortcutsConfig } from './Keyboard/ShortcutsConfig';
import { DocumentInformation } from './Properties/DocumentInformation';
import { DocumentSecuritySummary } from './Security/DocumentSecuritySummary';
import { ISupportApi, OpenDocumentInfo } from './SupportApi/ISupportApi';
import { AnnotationsModel, LayoutMode, EditMode } from './Annotations/types';
import { AnnotationBase, AnnotationTypeCode, TextAnnotation, AnnotationMarkedStateType, AnnotationReviewStateType, CopyBufferData, WidgetAnnotation } from './Annotations/AnnotationTypes';
import { ProgressDialog } from './Dialogs/ProgressDialog';
/// <reference path="vendor/i18next.d.ts" />
//@ts-ignore
import { i18n } from 'i18next';
import { DocumentList } from './DocumentListPanel';
import { GcSelectionPoint } from './Models/GcMeasurementTypes';
import { GcRightSidebar } from './RightSidebar/GcRightSidebar';
import { ReplyToolModel } from './ReplyTool/types';
import { GcRightSidebarState } from './RightSidebar/types';
import { SharedDocuments } from './SharedDocuments/SharedDocumentsPanel';
import { ShareDialog } from './SharedDocuments/ShareDialog';
import { LogLevel, ModificationsState, SharedAccessMode } from './SharedDocuments/types';
import { FormFillerDialog } from './FormFiller/FormFillerDialog';
import { LeftSidebar } from './LeftSidebar';
//@ts-ignore
import { ErrorSeverity, PanelHandle } from '@grapecity/viewer-core/types/api/PluginModel';
import { SignToolDialog } from './SignTool/SignToolDialog';
import { FloatingBar } from './FloatingBar/FloatingBar';
import { IGcVisiblePagesInfo, OpenParameters, OptionalContentConfig, PageViewport, SaveSettings, ViewerFeatureName, ViewerPreferences, OpenAction, SubmitFormOptions } from './Models/ViewerTypes';
import { GcPdfViewerDataLoader } from './Core/GcPdfViewerDataLoader';
import { ReportAction, ReportEvent } from './Models/PluginTypes';
import { StampImagesAwaiter } from './Utils/StampImagesAwaiter';
import { AfterOpenEventArgs, BeforeOpenEventArgs, ErrorEventArgs } from './Models/EventArgs';
import { PdfOrganizerDialog } from './PdfOrganizer/PdfOrganizerDialog';
export declare class ReportDocumentMoniker implements DocumentMoniker {
    readonly uri: string;
    readonly params: ParameterInfo[];
    readonly pluginKey = "pdf";
    constructor(uri: string, params: ParameterInfo[]);
}
export declare class PdfReportPlugin implements PluginModel.IPluginModule<ReportEvent, ReportAction> {
    readonly _viewer: GcPdfViewer;
    readonly pluginKey = "pdf";
    in17n: i18n;
    private readonly _httpClient;
    private _searcher;
    private _openParameters?;
    private _attachmentsPanel?;
    private _articlesPanel?;
    private _contentsPanel?;
    private _sharedDocumentsPanel?;
    private _thumbnailsPanel?;
    private _searchPanel?;
    private _searchPanelRef?;
    private _annotationsPanel?;
    private _acroFormPanel?;
    private _shortcutsConfig;
    private _document?;
    private _lastViewerState;
    private readonly _requiredSupportApi;
    private _titleToolbarItem;
    private _titleToolbarItemRemoved;
    private readonly _errorEvent;
    _options: ViewerOptions;
    _documentTitle: string;
    _outlineStore: Store<any, any> | null;
    _articlesStore: Store<any, any> | null;
    _attachmentsStore: Store<any, any> | null;
    _annotationsStore?: Store<any, any> | null;
    _acroFormStore?: Store<any, any> | null;
    _panelsUpdateKey: any;
    _pendingBinaryFiles: any;
    private _gcpdfdocumentviewer;
    private pdfUrl;
    _initialViewStateSetFlag: boolean;
    _articlesPanelComponent: Articles.View;
    _stateStorage: GcPdfViewerStateStorage;
    _loadDocViewerPromise: Promise<{}>;
    _cancelledInternal: boolean;
    private _constructed;
    _documentListPanel: PluginModel.PanelHandle;
    private _availablePanelsHash;
    private _licenseErrorShown;
    _pingSupportApiServerTimer: any;
    _supportApiAvailable: boolean;
    private _supportApiPingStarted;
    private _requestId;
    private _updatingAnnotationFlag;
    private _supportApiSuppressError;
    private _supportApiSuppressInfo;
    private _isViewModeSidebarPinned;
    private _updatingPanelFlag;
    _sidebarOpened: boolean;
    private _lastErrorReport;
    private _lastErrorReportTime;
    private _documentAssemblyFlag;
    private _fillingOfFormFieldsFlag;
    _allowPrintFlag: boolean;
    _rightSidebar: GcRightSidebar;
    private _editableTextBehavior?;
    private _supportApi;
    private _hasFields?;
    private _isAcroFormPresent?;
    _isXFAPresent?: boolean;
    sharedDocumentsPanel: SharedDocuments;
    afterOpenPromiseCapability: {
        promise: Promise<any>;
        resolve: Function;
        reject: Function;
    };
    private _windowResize?;
    private _envInfo;
    private _logLevel?;
    private _leftSidebar;
    docViewerId: string;
    private _disposed;
    private _dropFileAreaHelper;
    _annotationsPanelInstance: Annotations.Annotations | null;
    private _serverVersionString;
    private _floatingBar;
    private _documentList;
    disableFeaturesHash: {
        [key in ViewerFeatureName]?: boolean;
    };
    private _documentKeydownHandler?;
    private _documentKeyupHandler?;
    private _sideBarElemClickHandler?;
    private _shiftDown;
    private _titleToolbarItemTextChanged;
    private _dataLoader;
    private _stampImagesAwaiter;
    private _savedChangesVersion;
    private _disPrId;
    private _documentPointerOver;
    private _documentPointerDown;
    private _documentPointerUp;
    constructor(_viewer: GcPdfViewer, options: Partial<ViewerOptions>, i18n: i18n);
    onFileDrop(file: File, insertPoint: GcSelectionPoint): void;
    onImageUrlDrop(url: string, insertPoint: GcSelectionPoint, force?: boolean): void;
    onZoomChange(zoom: ZoomSettings, prevZoom?: ZoomSettings): ZoomSettings;
    onImageDrop(img: HTMLImageElement, insertPoint: GcSelectionPoint, force?: boolean): Promise<void>;
    addSignature(imageData: Uint8Array | null, args: {
        fileId: string;
        pageIndex: number;
        rect: number[];
        select?: boolean;
        subject?: string;
        fileName?: string;
        convertToContent?: boolean;
    }): Promise<{
        pageIndex: number;
        annotation: AnnotationBase;
    }>;
    addStamp(imageData: Uint8Array | null, args: {
        fileId: string;
        pageIndex: number;
        rect: number[];
        select?: boolean;
        subject?: string;
        fileName?: string;
        rotate?: number;
        convertToContent?: boolean;
    }): Promise<{
        pageIndex: number;
        annotation: AnnotationBase;
    }>;
    applyOptions(): void;
    private _applyOptionsInternal;
    addViewAreaStyle(cssText: string): string;
    removeViewAreaStyle(id: string): boolean;
    get optionalContentConfig(): Promise<OptionalContentConfig>;
    get options(): ViewerOptions;
    set options(options: ViewerOptions);
    get shortcutsConfig(): ShortcutsConfig;
    get structureTree(): Promise<any[] | null>;
    get dataLoader(): GcPdfViewerDataLoader;
    get docViewer(): any;
    get supportApi(): ISupportApi | null;
    private _initSupportApiIfAny;
    get supportApiEnabled(): boolean;
    _onSupportApiDisconnected(): void;
    isSupportApiCompatible(version: string, showErrorMessage?: boolean, severity?: ErrorSeverity): boolean;
    onSupportApiConnectionStateChanged(isConnected: boolean, serverVersion: string): void;
    _onSupportApiConnected(version: string, isReconnected: boolean): void;
    dispose(): void;
    onWindowResize(): void;
    addEvents(): void;
    removeEvents(): void;
    updatePinButtonTitle(): void;
    get keepStampAspectRatio(): boolean;
    set keepStampAspectRatio(val: boolean);
    loadDocumentList(documentListUrl?: string): void;
    get modificationsState(): ModificationsState;
    pushModificationsState(modificationsState: ModificationsState): void;
    reportError(params: PluginModel.IErrorParams, allowJsxContent?: boolean): void;
    get hasDocument(): boolean;
    setDocumentListPanel(handle: PluginModel.PanelHandle, documentList: DocumentList | null): void;
    get documentListPanelId(): string | null;
    loadSharedDocuments(): void;
    _onError(event: any): void;
    private _onMouseModeChange;
    private _onAnnotationUpdateCancelled;
    private _onAnnotationBoundsChange;
    get stampImagesAwaiter(): StampImagesAwaiter;
    private _onAnnotationImageLoaded;
    changeBoundsOrigin(pageIndex: number, bounds: number[], srcOrigin: 'TopLeft' | 'BottomLeft', destOrigin: 'TopLeft' | 'BottomLeft', normalize?: boolean): number[];
    getViewPort(pageIndex: number): PageViewport;
    private _onRequestShowCustomLayout;
    private _onRequestHideCustomLayout;
    answerRequest(answerData: any): void;
    private _onFirstArticleBead;
    _onLastArticleBead(event: any): void;
    _onArticleBeadNavigate(event: any): void;
    _onDocumentClosed(): void;
    private _onUndoStoreChanged;
    ensureSelectedAnnotationElement(pageIndex: number, annotation: AnnotationBase | string, args?: {
        skipPropertiesExpand?: boolean;
    }): Promise<boolean>;
    ensureSelectedAnnotation(): void;
    getAnnotationsStateModel(): AnnotationsModel;
    private _updateAnnotationAfterEdit;
    private _onAnnotationDone;
    private _onAnnotationEditStarted;
    loadAnnotationResourceFromUrl(annotationId: string, annotationType: AnnotationTypeCode, resourceUrl: string, selectedImageDpi?: number, select?: boolean, imageDataKey?: string | undefined): Promise<void>;
    selectResourceFromFile(annotationId: string, annotationType: AnnotationTypeCode, select?: boolean): void;
    private onDisposing;
    onDocumentOpen(): Promise<void>;
    private _resetRestrictionFlags;
    private _loadRestrictionFlags;
    private _onPageChange;
    private _onPagesLoaded;
    private _onDocumentLoad;
    private _onScaleChange;
    get activePanelId(): string | null;
    set activePanelId(id: string | null);
    pluginReady(): boolean;
    private onPanelToggled;
    onPanelChange: (panelId: string | null) => void;
    toggleAnnotationProperties(): void;
    freezeAnnotationEditorButton(): void;
    freezeFormEditorButton(): void;
    toggleFormProperties(): void;
    applyToolbarLayout(): void;
    toggleSidebar(panelId: string, pin?: boolean): void;
    private _ensureNarrowScreenDisabled;
    updateSharedDocumentLabel(): void;
    updateSecondToolbarPosition(): void;
    private _onStateChange;
    get hasArticles(): boolean;
    _updatePanels(state: Model, force?: boolean): void;
    getSelectedText(): string;
    isPanelAvailable(panelId: string): boolean;
    addDocumentTitleTool(): void;
    addOutlinePanel(): PanelHandle;
    scrollMarkedTextIntoView(pageIndex: number, id: string): Promise<void>;
    addStructureTreePanel(): PanelHandle;
    addLayersPanel(): PanelHandle;
    addSharedDocumentsPanel(): PanelHandle;
    addThumbnailsPanel(): PanelHandle;
    toggleSearchPanel(): void;
    addSearchPanel(): PanelHandle;
    get searchPanelHandle(): PanelHandle | undefined;
    get searchPanel(): Search.SearchPanel | undefined;
    addArticlesPanel(): PanelHandle;
    addAttachmentsPanel(): PanelHandle;
    get hasReplyTool(): boolean;
    get rightSidebar(): GcRightSidebar;
    addReplyTool(sidebarState?: GcRightSidebarState): void;
    addAnnotationEditorPanel(visible?: boolean): PanelHandle;
    get uniqueId(): string;
    addFormEditorPanel(visible?: boolean): PanelHandle;
    addAnnotation(pageIndex: number, annotation: AnnotationBase, args?: {
        skipPageRefresh?: boolean;
    }): Promise<{
        pageIndex: number;
        annotation: AnnotationBase;
    }>;
    updateAnnotation(pageIndex: number, annotation: AnnotationBase, args?: {
        skipPageRefresh?: boolean;
    }): Promise<{
        pageIndex: number;
        annotation: AnnotationBase;
    }>;
    updateAnnotations(pageIndex: number, annotations: AnnotationBase | AnnotationBase[], args?: {
        skipPageRefresh?: boolean;
    }): Promise<{
        pageIndex: number;
        annotations: AnnotationBase[];
    }>;
    updateGroupFieldValue(fieldName: string, newValue: string, args?: {
        skipPageRefresh?: boolean;
        propertyName?: string;
    }): Promise<boolean>;
    removeAnnotation(pageIndex: number, annotation: string | AnnotationBase, args?: {
        skipPageRefresh?: boolean;
    }): Promise<boolean>;
    findAnnotation(findString: string | number, findParams?: {
        findField?: 'id' | 'title' | 'contents' | 'fieldName' | string;
        pageNumberConstraint?: number;
        findAll?: boolean;
    }): Promise<{
        pageNumber: number;
        annotation: AnnotationBase;
    }[]>;
    getAttachments(): Promise<{
        pageNumber: number;
        annotation: AnnotationBase;
    }[]>;
    selectAnnotation(pageIndex: number | string, annotation?: AnnotationBase | string): Promise<boolean>;
    setExpandedEditorState(expandedPageIndex: number, selectedAnnotationId: string, expandedAnnotationIds: any): void;
    unselectAnnotation(): any;
    scrollAnnotationIntoView(pageIndexOrId: number | string, annotationOrScrollBehavior?: AnnotationBase | string | ScrollBehavior, scrollBehavior?: ScrollBehavior): Promise<void>;
    scrollAnnotationPropertiesIntoView(pageIndex: number, annotation: AnnotationBase | string): void;
    repaint(indicesToRepaint?: number[]): void;
    getAnnotationPageIndex(annotation: string | AnnotationBase): number | null;
    getAnnotationFromState(annotation: string | AnnotationBase): AnnotationBase | null;
    logError(method: string, message: string): void;
    logDebug(method: string, message: string): void;
    _onAddAnnotationRequest: (pageIndex: number, node: AnnotationBase) => Promise<{
        pageIndex: number;
        annotation: AnnotationBase;
    }>;
    _onUpdateAnnotationRequest: (pageIndex: number, node: AnnotationBase, skipExpand?: boolean) => Promise<{
        pageIndex: number;
        annotation: AnnotationBase;
    }>;
    _onUpdateAnnotationsRequest: (pageIndex: number, nodes: AnnotationBase[]) => Promise<{
        pageIndex: number;
        annotations: AnnotationBase[];
    }>;
    _onRemoveAnnotationRequest: (pageIndex: number, id: string) => Promise<boolean>;
    _onAnnotationNavigate: (pageIndex: number, node: AnnotationBase, params?: {
        preserveExpanded?: boolean;
        preserveFocused?: boolean;
        toggle?: boolean;
    }) => Promise<void>;
    _updateAttachmentsInternal(force?: boolean): void;
    resolveLinkNamedDestination(annotationOrId: string | AnnotationBase): void;
    refreshPropertyList(annotationId?: string): void;
    dispatchCommentsStoreState(): void;
    private _dispatchAnnotationsState;
    _onAnnotationNavigatePage: (pageIndex: number) => Promise<void>;
    loadAndScrollPageIntoView(pageIndex: number, destArray?: any[]): Promise<boolean>;
    get pageIndex(): number;
    get fileData(): Uint8Array | null;
    renderPage(page: PluginModel.IPageData): PluginModel.PageView;
    renderHighlightPage(page: PluginModel.IPageData, results: SearchFeature.SearchResult[]): PluginModel.PageView;
    onEscapePressed(): void;
    onOpenDocument(document: PluginModel.IDocument | null): void;
    loadDocumentTitle(): Promise<void>;
    onOpenDocumentView(view: PluginModel.IDocumentView): void;
    resolveAction(_: any, event: any): PluginModel.ViewerAction | ReportAction | null;
    processAction(context: PluginModel.ActionContext<ReportEvent>, action: ReportAction): boolean;
    getDocumentSecurity(): Promise<DocumentSecuritySummary>;
    getDocumentInformation(): Promise<DocumentInformation>;
    get fileUrl(): string;
    get fileName(): string;
    get localFileName(): string;
    private _formatLinkP;
    private _formatLinkLi;
    showAbout(): void;
    processEvent(context: PluginModel.ActionContext<ReportEvent>, event: ReportEvent, direction: PluginModel.TimeDirection): void;
    openLocalFile(): void;
    rotate(value: any): void;
    beep(): void;
    get scrollViewElement(): HTMLDivElement;
    get hostElement(): HTMLElement;
    goBack(): void;
    goForward(): void;
    cleanupDocument(): Promise<void>;
    dispatchCommentsState(state?: ReplyToolModel): void;
    openDocument: (moniker: ReportDocumentMoniker) => Promise<PluginModel.IDocument>;
    endUpdate(): void;
    _ensureInitialViewState(): void;
    onBeforeOpenFile(file: any, openParameters?: OpenParameters): {
        file: string;
        promise: Promise<any>;
        openParameters?: OpenParameters;
    };
    open(file: any, openParameters?: OpenParameters): void;
    print(): void;
    close(): Promise<void>;
    save(fileName?: string, saveSettings?: SaveSettings): Promise<boolean>;
    submitForm(submitUrl: string, submitForm?: true | SubmitFormOptions): void;
    resetForm(): void;
    getSubmitTransportForm(submitUrl: any, submitForm?: true | {
        fields: string[];
        refs: string[];
        include: boolean;
        includeNoValueFields: boolean;
        exportFormat: boolean;
        getMethod: boolean;
        submitCoordinates: boolean;
        xFDF: boolean;
        submitPDF: boolean;
        canonicalFormat: boolean;
    }): HTMLFormElement | null;
    get annotationStorage(): any;
    validateForm(validator?: (fieldValue: string | string[], field: WidgetAnnotation) => boolean | string, silent?: boolean, ignoreValidationAttrs?: boolean): string | boolean;
    download(fileName?: string): void;
    scrollPageIntoView(params: {
        pageNumber: number;
        destArray?: any[];
        allowNegativeOffset?: boolean;
    }): void;
    scrollBeadIntoView(articleBead: ArticleBead): void;
    isPageVisible(pageNumber: number): boolean;
    language: string;
    get rotation(): number;
    set rotation(val: number);
    currentPageNumber: number;
    updateVisiblePages(): void;
    getVisiblePagesInfo(): IGcVisiblePagesInfo;
    loadingThemeFlag: boolean;
    setTheme(theme?: string): void;
    raiseStateChanged(): void;
    get owner(): GcPdfViewer;
    get pdfjsLib(): any;
    get pdfDocument(): any;
    getViewerPreferences(): Promise<ViewerPreferences>;
    get openAction(): Promise<OpenAction | null>;
    get logLevel(): LogLevel;
    set logLevel(logLvel: LogLevel);
    set zoomValue(val: number);
    get zoomValue(): number;
    get hasUndoChanges(): boolean;
    get hasRedoChanges(): boolean;
    get undoIndex(): number;
    get undoCount(): number;
    get isDocumentShared(): boolean;
    get annotations(): Promise<{
        pageIndex: number;
        annotations: AnnotationBase[];
    }[]>;
    get version(): string;
    get editMode(): EditMode;
    set editMode(mode: EditMode);
    activateEditMode(mode: EditMode, args?: {
        editMode: EditMode;
        imageUrl: string;
        imageDpi: number;
        w: number;
        h: number;
        imageDataKey?: string;
        afterAdd?: (result: {
            pageIndex: number;
            annotation: AnnotationBase;
        }) => void;
    } | null): void;
    set editModeArgs(args: {
        editMode: EditMode;
        imageUrl: string;
        imageDpi: number;
        w: number;
        h: number;
        imageDataKey?: string;
        afterAdd?: (result: {
            pageIndex: number;
            annotation: AnnotationBase;
        }) => void;
    } | null);
    get editModeArgs(): {
        editMode: EditMode;
        imageUrl: string;
        imageDpi: number;
        w: number;
        h: number;
        imageDataKey?: string;
        afterAdd?: (result: {
            pageIndex: number;
            annotation: AnnotationBase;
        }) => void;
    } | null;
    get layoutMode(): LayoutMode;
    set layoutMode(mode: LayoutMode);
    get requiredSupportApiVersion(): string;
    get supportApiVersion(): string;
    get gcPdfVersion(): string;
    showSecondToolbar(toolbarKey: string): Promise<void>;
    get floatingBar(): Promise<FloatingBar>;
    _activatedEditorMode?: "SecondBar" | "FormEditor" | "AnnotationEdtor" | "Any" | "";
    get isAnyEditorMode(): boolean;
    get activatedEditorMode(): "SecondBar" | "FormEditor" | "AnnotationEdtor" | "Any" | "" | undefined;
    get isInEditorMode(): boolean;
    activateEditorMode(caller: "SecondBar" | "FormEditor" | "AnnotationEdtor"): void;
    deactivateEditorMode(caller: "SecondBar" | "ViewerLayout"): void;
    private _ensureLayoutMode;
    get hideAnnotations(): boolean;
    set hideAnnotations(hide: boolean);
    get hasChanges(): boolean;
    get changesVersion(): number;
    get onError(): EventFan<ErrorEventArgs>;
    get onBeforeOpen(): EventFan<BeforeOpenEventArgs>;
    get onAfterOpen(): EventFan<AfterOpenEventArgs>;
    get onThemeChanged(): EventFan<AfterOpenEventArgs>;
    activatePredefinedStampEditMode(args: {
        selectedImageUrl: string | undefined;
        selectedImageDpi: number;
        width?: number;
        height?: number;
        imageDataKey?: string;
        afterAdd?: (result: {
            pageIndex: number;
            annotation: AnnotationBase;
        }) => void;
    }): void;
    get isActivateEditModeOnMouseMoveAllowed(): boolean;
    commitChanges(): boolean;
    cancelChanges(): void;
    cancelInlineTextEdit(): string;
    clearStampsCache(): void;
    setPageTabs(pageIndex: number, tabs: "S" | "R" | "C" | "A" | "W" | undefined): void;
    getPageTabs(pageIndex: number): "S" | "R" | "C" | "A" | "W" | undefined;
    setPageRotation(pageIndex: number, rotation: number, viewRotationIncluded?: boolean): Promise<boolean>;
    getPageRotation(pageIndex: number, includeViewRotation?: boolean): number;
    setPageSize(pageIndex: number, size: {
        width: number;
        height: number;
    }): Promise<boolean>;
    toViewPortPoint(p: GcSelectionPoint): GcSelectionPoint;
    addStickyNote(position: GcSelectionPoint): void;
    showInlineTextEditor(textElement: HTMLElement, annotationElement: HTMLElement, pageIndex: number, annotation: AnnotationBase, propertyKey: string, finishCallback?: Function): void;
    hideInlineTextEditor(): void;
    openSharedDocument(sharedDocumentId: string): Promise<OpenDocumentInfo | null>;
    onSharedAccessModeChanged(newSharedAccessMode: SharedAccessMode): void;
    cloneAnnotation(annotation: AnnotationBase): AnnotationBase;
    get hasCopyData(): boolean;
    execCutAction(buffer?: CopyBufferData): Promise<boolean>;
    execCopyAction(buffer?: CopyBufferData): Promise<boolean>;
    execPasteAction(position?: GcSelectionPoint): Promise<boolean>;
    execDeleteAction(buffer?: CopyBufferData): Promise<boolean>;
    setAnnotationState(pageIndex: number, referenceAnnotation: TextAnnotation, state: AnnotationMarkedStateType | AnnotationReviewStateType, referenceType: 'R' | 'Group', userName?: string): Promise<boolean>;
    resetChanges(): Promise<void>;
    reload(keepUndoState?: boolean): Promise<void>;
    undoChanges(): void;
    redoChanges(): void;
    newDocument(params?: {
        fileName?: string;
        confirm?: boolean;
    }): Promise<LoadResult | null>;
    newPage(params?: {
        width?: number;
        height?: number;
        pageIndex?: number;
    }): Promise<void>;
    deletePage(pageIndex?: number): Promise<void>;
    private _ensureZoomFactorBounds;
    private _leftSidebarWidths;
    private _leftSideBarResizedHandler;
    private _setInitialLeftSidebarWidth;
    private _freezePanelButtonActiveState;
    private _unfreezePanelButtonActiveState;
    private _updateEditorToolbarLayout;
    private _createAnnotationsStore;
    private _loadDocViewer;
    get searcher(): GcPdfSearcher;
    private _onDocViewerReady;
    private _showProLicenseError;
    private _showLicenseError;
    _convertMsgToContent(msg: string): JSX.Element[];
    get sidebarPinned(): boolean;
    get leftSidebar(): LeftSidebar;
    execSidebarPanel(methodName: 'pin' | 'open' | 'unpin' | 'close' | 'toggle' | 'collapse' | 'expand', panelId?: string): void;
    beginPanelUpdate(doNotLock?: boolean): boolean;
    endPanelUpdate(): void;
    _ensureEditorCloseIcon(): void;
    private _showEditorPanel;
    get fingerprint(): string;
    private _editorRestrictionsMessageShownKey?;
    private _showEditorRestrictionsIfAny;
    private _showViewerLayout;
    private _onAnnotationsLoaded;
    get currentUserName(): string;
    set currentUserName(userName: string);
    updateTextCommentsState(annotationsData: {
        pageIndex: number;
        annotations: AnnotationBase[];
    }[]): void;
    private _appendAttachment;
    private onArticleNavigate;
    private onAttachmentNavigate;
    private onHasFormChanged;
    private onPdfAttachmentNavigate;
    private onNavigate;
    private _updateDocumentTitle;
    private _ensureDocTitleClass;
    get documentOpenedOnServer(): boolean;
    set documentOpenedOnServer(val: boolean);
    get canEditDocument(): boolean;
    get canPrintDocument(): boolean;
    get canAddStickyNote(): boolean;
    get hasForm(): boolean;
    showFormFiller(): void;
    showSignTool(preferredSettings?: SignToolSettings): void;
    _additionalLocalizationMessages(): void;
    checkAnnotationLocked(annotationToCheck: AnnotationBase, editType?: "Any" | "EditProperty" | "Delete" | "EditContents", showErrorMessageAndRefresh?: boolean): boolean;
    showAnnotationLocked(node: AnnotationBase): void;
    showEditingToolsDisabledMessage(details?: string, severity?: "error" | "warn" | "info" | "debug"): void;
    showMessage(message: string, details?: string, severity?: "error" | "warn" | "info" | "debug", allowJsxContent?: boolean): void;
    private _pingSupportApiServer;
    private _convertPropertyValues;
    get propertiesDialog(): PropertiesDialog;
    confirmationDialog: ConfirmationDialog;
    shareDialog: ShareDialog;
    formFillerDialog: FormFillerDialog;
    inputPasswordDialog: GcPdfPasswordDialog;
    printProgressDialog: GcPdfPrintProgress;
    progressDialog: ProgressDialog;
    signToolDialog: SignToolDialog;
    contextMenuProvider: ContextMenuProvider;
    fPropertiesDialog: PropertiesDialog;
    pdfOrganizerDialog: PdfOrganizerDialog;
    renderDialogRoots(viewer: GcPdfViewer): void;
    disposeDialogRoots(): void;
}
export default PdfReportPlugin;
