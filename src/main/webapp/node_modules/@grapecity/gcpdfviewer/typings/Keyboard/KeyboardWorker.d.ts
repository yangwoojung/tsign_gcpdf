import { GcPdfViewer } from '../GcPdfViewer';
export declare class KeyboardWorker {
    private readonly _viewer;
    options: any;
    private readonly _factory;
    private _windowHandlers;
    private _topWindowHandlers;
    private _eventBusHandlers;
    private _shiftKeyPressedFlag;
    _caretAllowForPan: boolean;
    constructor(_viewer: GcPdfViewer, options: any, _factory: any);
    dispose(): void;
    populateOptions(options?: any): void;
    get elementScrollView(): HTMLDivElement;
    tool_move_caret_left(e: any): boolean;
    tool_move_caret_right(e: any): boolean;
    tool_move_caret_up(e: any): boolean;
    tool_move_caret_down(e: any): boolean;
    tool_move_caret_sequence_start(e: any): boolean;
    tool_move_caret_document_start(e: any): boolean;
    tool_move_caret_sequence_end(e: any): boolean;
    tool_move_caret_document_end(e: any): boolean;
    tool_zoom_clientsize(): boolean;
    tool_zoom_pagesize(): boolean;
    tool_zoomin(): boolean;
    tool_zoomout(): boolean;
    tool_print(): boolean;
    tool_select_all(): boolean;
    selectAll(): boolean;
    tool_history_back(): boolean;
    tool_history_forward(): boolean;
    scrollDown(e: any): boolean;
    scrollUp(e: any): boolean;
    moveCaretLeft(trackSelection?: boolean, jumpWord?: boolean): boolean;
    moveCaretRight(trackSelection?: boolean, jumpWord?: boolean): boolean;
    moveCaretUp(trackSelection?: boolean, jumpWord?: boolean): boolean;
    moveCaretDown(trackSelection?: boolean, jumpWord?: boolean): boolean;
    moveCaretDocumentStart(trackSelection?: boolean): boolean;
    moveCaretDocumentEnd(trackSelection?: boolean): boolean;
    moveCaretSequenceStart(trackSelection?: boolean): boolean;
    moveCaretSequenceEnd(trackSelection?: boolean): boolean;
    private _attachShortcutHandler;
    handleShortcut(e: KeyboardEvent, skipElementCheck?: boolean): any;
    private _bindWindowEvents;
    private _unbindWindowEvents;
    private _bindEventBusEvents;
    private _unbindEventBusEvents;
    onWindowKeyDown(event: KeyboardEvent): void;
    onWindowKeyUp(event: KeyboardEvent): void;
    _handleShiftKey(shiftKeyPressed: boolean): void;
    onWindowMouseWheel(evt: any): boolean;
}
